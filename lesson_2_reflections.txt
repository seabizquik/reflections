
Lesson 2 Reflections

Reflect: Initializing a Repository: What happens when you initialize a repostuory? Why do you need to do it?

1. a .git file is created, allowing you to same commits to the repository

Reflect: Staging Area: How is the staging area different from the working directory and the reposutory? What value do you think it offers?

1. The staging area is a kind of intermediary area between the working directory and the repository. It allows one to remove things before they are commited, and gives the programmer the ability to add things to the repository in batches.

Reflect: Commit Size: How can you use the staging area to make sure you have one commit per logical change?

1. The staging area will allow you to see the changes made before commits. If you find your commit message being too lengthy or outlining too many changes, you may need to make smaller commits.

Reflect: When to Use Branches: What are some situations when branches would be helpful in keeping your history organized? How would branches help?

1. Branches would help for making different versions of a program or when you are trying something experimental. This way you have the freedom to change your code with the assurance that the Master branch is still available to go back to. You can also have multiple versions of a program so you can compare them. 

Reflect: Visualizing with Diagrams: How do the diagrams help you visualize branch structure?

1. Branch diagrams allow you to see in a geometrical diagram where each branch was created and what commits were made to each branch.

Reflect: Merging Two Branches: What is the result of merging two branches together? Why do we represent it in the diagram the wya we do?

1. Merging two branches together brings the changes made in each branch into one. We represent it the way we do to have a record of when and where the merge happened.